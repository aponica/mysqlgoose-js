//=============================================================================
//  Copyright 2019-2021 Opplaud LLC and other contributors. MIT licensed.
//=============================================================================

//-----------
//  @ignore
//-----------

const kiSqlstring = require('sqlstring');


//-----------------------------------------------------------------------------
//  @alias module:@aponica/mysqlgoose-js.Schema
//  @public
//
//  @classdesc
//    Provides methods for defining a document structure.
//
//    A `Schema` is passed to {@linkcode
//    module:@aponica/mysqlgoose-js.Mysqlgoose#model|Mysqlgoose.model}
//    to create a model.
//
//    Used like MongooseJS's
//    {@linkcode https://mongoosejs.com/docs/api/schema.html|Schema} class.
//
//    Only a subset of the methods provided by MongooseJS's class are
//    currently supported, and not always in a fully-compatible way.
//    For most cases, however, there's enough to get by.
//
//  @see {@link https://mongoosejs.com/docs/api/schema.html|MongooseJS Schema}
//-----------------------------------------------------------------------------

class Schema {

  //---------------------------------------------------------------------------
  //  @summary
  //    Constructs a schema for a document.
  //
  //  @param {Object} hhDocDef
  //    The document definition, which is a hash (dictionary) object of hashes
  //    (most conveniently generated by
  //    [mysqlgoose-schema-js]{@link https://aponica.com/docs/mysqlgoose-schema-js}
  //    from the database schema). The outer hash is indexed by column names,
  //    and each inner hash includes members such as:
  //
  //      @param {*} [hhDocDef.vDefault]
  //        The default value for the column.
  //
  //      @param {number} [hhDocDef.nPrecision]
  //        The precision of a numeric column.
  //
  //      @param {Boolean} [hhDocDef.bPrimary]
  //        true if the column is the primary key for the table.
  //
  //      @param {Object} [hhDocDef.hReferences]
  //        For a foreign key, specifies the foreign table and column
  //        referenced by this column:
  //
  //          @param {string} hhDocDef.hReferences.zColumn
  //            The name of the foreign column.
  //
  //          @param {string} hhDocDef.hReferences.zTable
  //            The name of the foreign table.
  //
  //      @param {Object} [hhDocDef.nScale]
  //        The scale of a numeric column.
  //
  //      @param {Object} hhDocDef.zType
  //        The data type of the column.
  //
  //  @example <caption>creating models from mysqlgoose-schema-js output</caption>
  //    const models = {};
  //    const defs = JSON.parse( require('fs').readFileSync('definitions.json' ) );
  //    for ( let [ table, def ] of Object.entries( defs ) )
  //      if ( '//' !== table ) // skip comment member
  //        models[ table ] =
  //          iMysqlgoose.model( table, new Mysqlgoose.Schema( def ) );
  //
  //---------------------------------------------------------------------------

  constructor( hhDocDef ) {

    this.hhColDefs = {};
    this.zIdField = null;

    for ( let zColumnName in hhDocDef )
      if ( hhDocDef.hasOwnProperty( zColumnName ) ) {

        let hColDef = hhDocDef[ zColumnName ];

        this.hhColDefs[ zColumnName ] = hColDef;

        this.hhColDefs[ zColumnName ].zColumnName = zColumnName;

        this.hhColDefs[ zColumnName ].zSafeColumnName =
          kiSqlstring.escapeId( zColumnName );

        if ( hColDef.bPrimary )
          this.zIdField = zColumnName;

        } // zColumnName

    } // construct

  //---------------------------------------------------------------------------
  //  @public
  //
  //  @summary
  //    Iterates the schemas paths similar to
  //    [Array.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}.
  //
  //  @param {function} fCallback
  //    Callback function. For each iteration, this is passed two arguments:
  //
  //      zPathName (string)
  //        The path (column) name.
  //
  //      hSchemaType (Object)
  //        The schema type (definition), which will include members that
  //        were added to the definition when the schema was instantiated.
  //
  //  @returns {Schema}
  //    This schema, for chaining.
  //---------------------------------------------------------------------------

  eachPath( fCallback ) {

    for ( let zPath in this.hhColDefs )
      if ( this.hhColDefs.hasOwnProperty( zPath ) )
        fCallback( zPath, this.hhColDefs[ zPath ] );

    return this;

    } // eachPath

  } // Schema

module.exports = Schema;

// EOF
